@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "环保指标";
}

<ul class="breadcrumb">
    <li>
        <a href="@Url.Action("Index", "Home")">首页</a> <span class="divider">/</span>
    </li>
    <li>
        <a href="#">环保指标</a>
    </li>
    <li style="padding-left: 70%">
        <button class="btn btn-small btn-primary" onclick="$('#envModal').modal('show');">
            <i class=" icon-search"></i>&nbsp;&nbsp;指标查询/对比</button>
    </li>
</ul>
<!--row-->
<div class="row-fluid sortable">
    <div class="box span12">
        <div class="box-header well" data-original-title="">
            <h2>环保指标</h2>
        </div>
        <div class="box-content">
            <table id="environmental-info" class="table table-striped table-bordered ">
                <thead>
                    <tr>
                        <th>SO2排放量(mg/m<sup>3</sup>)</th>
                        <th>NOx(mg/m<sup>3</sup>)</th>
                        <th>脱硫耗电量(MW·h)</th>
                        <th>脱硝耗电量(MW·h)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>0</td>
                        <td>0</td>
                        <td>0</td>
                        <td>0</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<!--/row-->

<!-- row -->
<div class="row-fluid sortable">
    <div class="box span12">
        <div class="box-header well" data-original-title="">
            <h2>实时曲线</h2>
        </div>
        <div class="box-content">
            <div id="chart-label" style="float: right"></div>
            <div id="realtimechart" style="height: 250px; clear: both"></div>
        </div>
    </div>
</div>

<!--/row-->
@{Html.RenderAction("Modal");}
<script type="text/javascript">
    var websocket;
    var tds = $("#environmental-info tbody td");
    $(document).ready(function () {
        var wsServer = "@ViewBag.Protocol://@Request.Url.Host:@ViewBag.Port/EnvironmentalIndex.Index";
        websocket = new WebSocket(wsServer);
        websocket.onopen = function (evt) { onOpen(evt) };
        websocket.onclose = function (evt) { onClose(evt) };
        websocket.onmessage = function (evt) { onMessage(evt) };
        websocket.onerror = function (evt) { onError(evt) };

        var previousPoint = null;
        $("#realtimechart").bind("plothover", function (event, pos, item) {
            if (item) {
                if (previousPoint != item.dataIndex) {
                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2), y = item.datapoint[1].toFixed(2);
                    var d = new Date()
                    d.setTime(x);
                    var hours = d.getHours() < 10 ? "0" + d.getHours() : d.getHours();
                    var minutes = d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes();
                    var seconds = d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds();
                    var time = hours + ":" + minutes + ":" + seconds;
                    showTooltip(item.pageX, item.pageY, time + "-" + y);
                }
            }
            else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        });

    });

    function onOpen(evt) {
        console.log("Connected to WebSocket server.");
    }
    function onClose(evt) {
        alert("websocket is closed.");
    }
    function onMessage(evt) {
        var data = $.parseJSON(evt.data).d;
        tds.eq(0).html(data[0]["SO2"]);
        tds.eq(1).html(data[0]["NOX"]);
        tds.eq(2).html(data[0]["DSPC"]);
        tds.eq(3).html(data[0]["DNPC"]);
        update({
            SO2: data[0]["SO2"],
            NOX: data[0]["NOX"],
            DSPC: data[0]["DSPC"],
            DNPC: data[0]["DNPC"],
            Timestamp: data[0]["Timestamp"]
        });
    }
    function onError(evt) {
        alert('Error occured: ' + evt.data);
    }

    var so2 = [];
    var nox = [];
    var dnpc = [];
    var dspc = [];
    var dataset;
    var totalPoints = 30;
    var updateInterval = 1000;
    var now = new Date().getTime();
    var options = {
        series: {
            lines: { show: true, lineWidth: 2 },
            points: { show: true }
        },
        xaxis: {
            mode: "time",
            tickSize: [1, "second"],
            tickFormatter: function (v, axis) {
                var date = new Date(v);

                if (date.getSeconds() % 10 == 0) {
                    var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
                    var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
                    var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();

                    return hours + ":" + minutes + ":" + seconds;
                } else {
                    return "";
                }
            }
        },
        yaxes: [
                {
                    position: "left",
                    axisLabel: "排放量"
                },
            {
                position: "right",
                axisLabel: "耗电量"
            }
        ],
        legend: {
            noColumns: 0,
            container: "#chart-label"
        },
        grid: { hoverable: true, backgroundColor: { colors: ["#fff", "#eee"] } }
    };
    initData();
    function initData() {
        for (var i = 0; i < totalPoints; i++) {
            var temp = [now += updateInterval, null];
            nox.push(temp);
            so2.push(temp);
            dnpc.push(temp);
            dspc.push(temp);
        }
    }

    function update(_data) {
        //remove first item of array
        nox.shift();
        so2.shift();
        dnpc.shift();
        dspc.shift();

        var timestamp = _data.Timestamp.split(".");
        now = Date.parse(timestamp[0]) + parseInt(timestamp[1].substring(0, 3));
        //add the data retrieve from backend to array
        var temp = [now, _data["NOX"]];
        nox.push(temp);
        temp = [now, _data["SO2"]];
        so2.push(temp);
        temp = [now, _data["DNPC"]];
        dnpc.push(temp);
        temp = [now, _data["DSPC"]];
        dspc.push(temp);

        //update legend label so users can see the latest value in the legend
        dataset = [
            { label: "NOx:" + parseFloat(_data["NOX"]).toFixed(2) + "mg/m<sup>3</sup>", data: nox, lines: { lineWidth: 2 }, yaxis: 1 },
            { label: "SO2:" + parseFloat(_data["SO2"]).toFixed(2) + "mg/m<sup>3</sup>", data: so2, lines: { lineWidth: 2 }, color: "#3f96cb", yaxis: 1 },
            { label: "脱硝耗电量:" + parseFloat(_data["DNPC"]).toFixed(2) + "MW·h", data: dnpc, lines: { lineWidth: 2 }, color: "#cb4b4a", yaxis: 2 },
            { label: "脱硫耗电量:" + parseFloat(_data["DSPC"]).toFixed(2) + "MW·h", data: dspc, lines: { lineWidth: 2 }, color: "#4da74d", yaxis: 2 },
        ];

        //redraw the chart
        $.plot($("#realtimechart"), dataset, options);
    }

    function showTooltip(x, y, contents) {
        $('<div id="tooltip">' + contents + '</div>').css({
            position: 'absolute',
            display: 'none',
            top: y + 5,
            left: x + 5,
            border: '1px solid #fdd',
            padding: '2px',
            'background-color': '#dfeffc',
            opacity: 0.80
        }).appendTo("body").fadeIn(200);
    }
</script>
